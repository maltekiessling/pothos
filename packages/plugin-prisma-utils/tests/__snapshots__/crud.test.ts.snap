// Vitest Snapshot v1

exports[`generate crud > generates schema 1`] = `
"type Comment {
  author: User!
  content: String!
  id: ID!
  post: Post!
}

input CommentCreateAuthorRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutCommentsInput
}

input CommentCreatePostRelation {
  connect: PostUniqueFilter
  create: PostCreateWithoutCommentsInput
}

input CommentCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  id: Int
  post: CommentCreatePostRelation!
}

input CommentCreateWithoutPostInput {
  author: CommentCreateAuthorRelation!
  content: String!
  createdAt: DateTime
  id: Int
}

input CommentFilter {
  author: UserFilter
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostFilter
  postId: IntFilter
}

input CommentListFilter {
  every: CommentFilter
  none: CommentFilter
  some: CommentFilter
}

input CommentOrderBy {
  author: UserOrderBy
  authorId: OrderBy
  content: OrderBy
  createdAt: OrderBy
  id: OrderBy
  post: PostOrderBy
  postId: OrderBy
}

input CommentUniqueFilter {
  createdAt: DateTime
  id: Int
}

input CommentUpdateAuthorRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsInput
}

input CommentUpdatePostRelation {
  connect: PostUniqueFilter
  create: PostCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutCommentsInput
}

input CommentUpdateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  id: Int
  post: CommentUpdatePostRelation
}

input CommentUpdateWithoutPostInput {
  author: CommentUpdateAuthorRelation
  content: String
  createdAt: DateTime
  id: Int
}

input CommentWithoutAuthorFilter {
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  post: PostFilter
  postId: IntFilter
}

input CommentWithoutPostFilter {
  author: UserFilter
  authorId: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: DateTime
  isNot: DateTime
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input FollowCreateFromRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowingInput
}

input FollowCreateToRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowersInput
}

input FollowCreateWithoutFromInput {
  to: FollowCreateToRelation!
}

input FollowCreateWithoutToInput {
  from: FollowCreateFromRelation!
}

input FollowFilter {
  from: UserFilter
  fromId: IntFilter
  to: UserFilter
  toId: IntFilter
}

input FollowListFilter {
  every: FollowFilter
  none: FollowFilter
  some: FollowFilter
}

input FollowOrderBy {
  from: UserOrderBy
  fromId: OrderBy
  to: UserOrderBy
  toId: OrderBy
}

input FollowUniqueFilter {
  fromId: Int
  toId: Int
}

input FollowUpdateFromRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowingInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutFollowingInput
}

input FollowUpdateToRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutFollowersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutFollowersInput
}

input FollowUpdateWithoutFromInput {
  to: FollowUpdateToRelation
}

input FollowUpdateWithoutToInput {
  from: FollowUpdateFromRelation
}

input FollowWithoutFromFilter {
  to: UserFilter
  toId: IntFilter
}

input FollowWithoutToFilter {
  from: UserFilter
  fromId: IntFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  is: Int
  isNot: Int
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

input MediaCreatePostsRelation {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutMediaInput!]
}

input MediaCreateUploadedByRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutMediaInput
}

input MediaCreateWithoutPostsInput {
  id: Int
  uploadedBy: MediaCreateUploadedByRelation
  url: String!
}

input MediaCreateWithoutUploadedByInput {
  id: Int
  posts: MediaCreatePostsRelation
  url: String!
}

input MediaFilter {
  id: IntFilter
  posts: PostMediaListFilter
  uploadedBy: UserFilter
  uploadedById: IntFilter
  url: StringFilter
}

input MediaListFilter {
  every: MediaFilter
  none: MediaFilter
  some: MediaFilter
}

input MediaOrderBy {
  id: OrderBy
  posts: PostMediaOrderBy
  uploadedBy: UserOrderBy
  uploadedById: OrderBy
  url: OrderBy
}

input MediaUniqueFilter {
  id: Int
}

input MediaUpdatePostsRelation {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutMediaInput!]
  delete: [PostMediaUniqueFilter!]
  deleteMany: [PostMediaWithoutMediaFilter!]
  disconnect: [PostMediaUniqueFilter!]
  set: [PostMediaUniqueFilter!]
  update: [MediaUpdatePostsRelationUpdate!]
  updateMany: [MediaUpdatePostsRelationUpdateMany!]
}

input MediaUpdatePostsRelationUpdate {
  data: PostMediaUpdateWithoutMediaInput
  where: PostMediaUniqueFilter
}

input MediaUpdatePostsRelationUpdateMany {
  data: PostMediaUpdateWithoutMediaInput
  where: PostMediaWithoutMediaFilter
}

input MediaUpdateUploadedByRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutMediaInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutMediaInput
}

input MediaUpdateWithoutPostsInput {
  id: Int
  uploadedBy: MediaUpdateUploadedByRelation
  url: String
}

input MediaUpdateWithoutUploadedByInput {
  id: Int
  posts: [MediaUpdatePostsRelation!]
  url: String
}

input MediaWithoutUploadedByFilter {
  id: IntFilter
  posts: PostMediaListFilter
  url: StringFilter
}

type Mutation {
  createUser(input: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserUniqueFilter!): User!
}

enum OrderBy {
  Asc
  Desc
}

type Post {
  author: User!
  comments(filter: CommentFilter, orderBy: CommentOrderBy): [Comment!]!
  id: ID!
}

input PostCreateAuthorRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutPostsInput
}

input PostCreateCommentsRelation {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutPostInput!]
}

input PostCreateMediaRelation {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutPostInput!]
}

input PostCreateWithoutAuthorInput {
  comments: PostCreateCommentsRelation
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelation
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: PostCreateAuthorRelation!
  content: String
  createdAt: DateTime
  id: Int
  media: PostCreateMediaRelation
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutMediaInput {
  author: PostCreateAuthorRelation!
  comments: PostCreateCommentsRelation
  content: String
  createdAt: DateTime
  id: Int
  title: String!
  updatedAt: DateTime
}

input PostFilter {
  author: UserFilter
  authorId: IntFilter
  comments: CommentListFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  media: PostMediaListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostListFilter {
  every: PostFilter
  none: PostFilter
  some: PostFilter
}

input PostMediaCreateMediaRelation {
  connect: MediaUniqueFilter
  create: MediaCreateWithoutPostsInput
}

input PostMediaCreatePostRelation {
  connect: PostUniqueFilter
  create: PostCreateWithoutMediaInput
}

input PostMediaCreateWithoutMediaInput {
  id: Int
  order: Int!
  post: PostMediaCreatePostRelation!
}

input PostMediaCreateWithoutPostInput {
  id: Int
  media: PostMediaCreateMediaRelation!
  order: Int!
}

input PostMediaFilter {
  id: IntFilter
  media: MediaFilter
  mediaId: IntFilter
  order: IntFilter
  post: PostFilter
  postId: IntFilter
}

input PostMediaListFilter {
  every: PostMediaFilter
  none: PostMediaFilter
  some: PostMediaFilter
}

input PostMediaOrderBy {
  id: OrderBy
  media: MediaOrderBy
  mediaId: OrderBy
  order: OrderBy
  post: PostOrderBy
  postId: OrderBy
}

input PostMediaUniqueFilter {
  id: Int
}

input PostMediaUpdateMediaRelation {
  connect: MediaUniqueFilter
  create: MediaCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: MediaUpdateWithoutPostsInput
}

input PostMediaUpdatePostRelation {
  connect: PostUniqueFilter
  create: PostCreateWithoutMediaInput
  delete: Boolean
  disconnect: Boolean
  update: PostUpdateWithoutMediaInput
}

input PostMediaUpdateWithoutMediaInput {
  id: Int
  order: Int
  post: PostMediaUpdatePostRelation
}

input PostMediaUpdateWithoutPostInput {
  id: Int
  media: PostMediaUpdateMediaRelation
  order: Int
}

input PostMediaWithoutMediaFilter {
  id: IntFilter
  order: IntFilter
  post: PostFilter
  postId: IntFilter
}

input PostMediaWithoutPostFilter {
  id: IntFilter
  media: MediaFilter
  mediaId: IntFilter
  order: IntFilter
}

input PostOrderBy {
  author: UserOrderBy
  authorId: OrderBy
  comments: CommentOrderBy
  content: OrderBy
  createdAt: OrderBy
  id: OrderBy
  media: PostMediaOrderBy
  published: OrderBy
  title: OrderBy
  updatedAt: OrderBy
}

input PostUniqueFilter {
  createdAt: DateTime
  id: Int
}

input PostUpdateAuthorRelation {
  connect: UserUniqueFilter
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsInput
}

input PostUpdateCommentsRelation {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentUniqueFilter!]
  deleteMany: [CommentWithoutPostFilter!]
  disconnect: [CommentUniqueFilter!]
  set: [CommentUniqueFilter!]
  update: [PostUpdateCommentsRelationUpdate!]
  updateMany: [PostUpdateCommentsRelationUpdateMany!]
}

input PostUpdateCommentsRelationUpdate {
  data: CommentUpdateWithoutPostInput
  where: CommentUniqueFilter
}

input PostUpdateCommentsRelationUpdateMany {
  data: CommentUpdateWithoutPostInput
  where: CommentWithoutPostFilter
}

input PostUpdateMediaRelation {
  connect: [PostMediaUniqueFilter!]
  create: [PostMediaCreateWithoutPostInput!]
  delete: [PostMediaUniqueFilter!]
  deleteMany: [PostMediaWithoutPostFilter!]
  disconnect: [PostMediaUniqueFilter!]
  set: [PostMediaUniqueFilter!]
  update: [PostUpdateMediaRelationUpdate!]
  updateMany: [PostUpdateMediaRelationUpdateMany!]
}

input PostUpdateMediaRelationUpdate {
  data: PostMediaUpdateWithoutPostInput
  where: PostMediaUniqueFilter
}

input PostUpdateMediaRelationUpdateMany {
  data: PostMediaUpdateWithoutPostInput
  where: PostMediaWithoutPostFilter
}

input PostUpdateWithoutAuthorInput {
  comments: [PostUpdateCommentsRelation!]
  content: String
  createdAt: DateTime
  id: Int
  media: [PostUpdateMediaRelation!]
  title: String
  updatedAt: DateTime
}

input PostUpdateWithoutCommentsInput {
  author: PostUpdateAuthorRelation
  content: String
  createdAt: DateTime
  id: Int
  media: [PostUpdateMediaRelation!]
  title: String
  updatedAt: DateTime
}

input PostUpdateWithoutMediaInput {
  author: PostUpdateAuthorRelation
  comments: [PostUpdateCommentsRelation!]
  content: String
  createdAt: DateTime
  id: Int
  title: String
  updatedAt: DateTime
}

input PostWithoutAuthorFilter {
  comments: CommentListFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  media: PostMediaListFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input ProfileCreateWithoutUserInput {
  bio: String
  id: Int
}

input ProfileFilter {
  bio: StringFilter
  id: IntFilter
  user: UserFilter
  userId: IntFilter
}

input ProfileOrderBy {
  bio: OrderBy
  id: OrderBy
  user: UserOrderBy
  userId: OrderBy
}

input ProfileUniqueFilter {
  id: Int
  userId: Int
}

input ProfileUpdateWithoutUserInput {
  bio: String
  id: Int
}

type Query {
  posts(filter: PostFilter, orderBy: PostOrderBy): [Post!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  is: String
  isNot: String
  lt: String
  lte: String
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  comments: [Comment!]!
  email: String!
  id: ID!
  name: String
  posts(filter: PostFilter, orderBy: PostOrderBy): [Post!]!
}

input UserCreateCommentsRelation {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutAuthorInput!]
}

input UserCreateFollowersRelation {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutToInput!]
}

input UserCreateFollowingRelation {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutFromInput!]
}

input UserCreateInput {
  Media: UserCreateMediaRelation
  comments: UserCreateCommentsRelation
  email: String!
  followers: UserCreateFollowersRelation
  following: UserCreateFollowingRelation
  id: Int
  name: String
  posts: UserCreatePostsRelation
  profile: UserCreateProfileRelation
}

input UserCreateMediaRelation {
  connect: [MediaUniqueFilter!]
  create: [MediaCreateWithoutUploadedByInput!]
}

input UserCreatePostsRelation {
  connect: [PostUniqueFilter!]
  create: [PostCreateWithoutAuthorInput!]
}

input UserCreateProfileRelation {
  connect: ProfileUniqueFilter
  create: ProfileCreateWithoutUserInput
}

input UserCreateWithoutCommentsInput {
  Media: UserCreateMediaRelation
  email: String!
  followers: UserCreateFollowersRelation
  following: UserCreateFollowingRelation
  id: Int
  name: String
  posts: UserCreatePostsRelation
  profile: UserCreateProfileRelation
}

input UserCreateWithoutFollowersInput {
  Media: UserCreateMediaRelation
  comments: UserCreateCommentsRelation
  email: String!
  following: UserCreateFollowingRelation
  id: Int
  name: String
  posts: UserCreatePostsRelation
  profile: UserCreateProfileRelation
}

input UserCreateWithoutFollowingInput {
  Media: UserCreateMediaRelation
  comments: UserCreateCommentsRelation
  email: String!
  followers: UserCreateFollowersRelation
  id: Int
  name: String
  posts: UserCreatePostsRelation
  profile: UserCreateProfileRelation
}

input UserCreateWithoutMediaInput {
  comments: UserCreateCommentsRelation
  email: String!
  followers: UserCreateFollowersRelation
  following: UserCreateFollowingRelation
  id: Int
  name: String
  posts: UserCreatePostsRelation
  profile: UserCreateProfileRelation
}

input UserCreateWithoutPostsInput {
  Media: UserCreateMediaRelation
  comments: UserCreateCommentsRelation
  email: String!
  followers: UserCreateFollowersRelation
  following: UserCreateFollowingRelation
  id: Int
  name: String
  profile: UserCreateProfileRelation
}

input UserFilter {
  Media: MediaListFilter
  comments: CommentListFilter
  email: StringFilter
  followers: FollowListFilter
  following: FollowListFilter
  id: IntFilter
  name: StringFilter
  posts: PostListFilter
  profile: ProfileFilter
}

input UserOrderBy {
  Media: MediaOrderBy
  comments: CommentOrderBy
  email: OrderBy
  followers: FollowOrderBy
  following: FollowOrderBy
  id: OrderBy
  name: OrderBy
  posts: PostOrderBy
  profile: ProfileOrderBy
}

input UserUniqueFilter {
  email: String
  id: Int
}

input UserUpdateCommentsRelation {
  connect: [CommentUniqueFilter!]
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentUniqueFilter!]
  deleteMany: [CommentWithoutAuthorFilter!]
  disconnect: [CommentUniqueFilter!]
  set: [CommentUniqueFilter!]
  update: [UserUpdateCommentsRelationUpdate!]
  updateMany: [UserUpdateCommentsRelationUpdateMany!]
}

input UserUpdateCommentsRelationUpdate {
  data: CommentUpdateWithoutAuthorInput
  where: CommentUniqueFilter
}

input UserUpdateCommentsRelationUpdateMany {
  data: CommentUpdateWithoutAuthorInput
  where: CommentWithoutAuthorFilter
}

input UserUpdateFollowersRelation {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutToInput!]
  delete: [FollowUniqueFilter!]
  deleteMany: [FollowWithoutToFilter!]
  disconnect: [FollowUniqueFilter!]
  set: [FollowUniqueFilter!]
  update: [UserUpdateFollowersRelationUpdate!]
  updateMany: [UserUpdateFollowersRelationUpdateMany!]
}

input UserUpdateFollowersRelationUpdate {
  data: FollowUpdateWithoutToInput
  where: FollowUniqueFilter
}

input UserUpdateFollowersRelationUpdateMany {
  data: FollowUpdateWithoutToInput
  where: FollowWithoutToFilter
}

input UserUpdateFollowingRelation {
  connect: [FollowUniqueFilter!]
  create: [FollowCreateWithoutFromInput!]
  delete: [FollowUniqueFilter!]
  deleteMany: [FollowWithoutFromFilter!]
  disconnect: [FollowUniqueFilter!]
  set: [FollowUniqueFilter!]
  update: [UserUpdateFollowingRelationUpdate!]
  updateMany: [UserUpdateFollowingRelationUpdateMany!]
}

input UserUpdateFollowingRelationUpdate {
  data: FollowUpdateWithoutFromInput
  where: FollowUniqueFilter
}

input UserUpdateFollowingRelationUpdateMany {
  data: FollowUpdateWithoutFromInput
  where: FollowWithoutFromFilter
}

input UserUpdateInput {
  Media: [UserUpdateMediaRelation!]
  comments: [UserUpdateCommentsRelation!]
  email: String
  followers: [UserUpdateFollowersRelation!]
  following: [UserUpdateFollowingRelation!]
  id: Int
  name: String
  posts: [UserUpdatePostsRelation!]
  profile: UserUpdateProfileRelation
}

input UserUpdateMediaRelation {
  connect: [MediaUniqueFilter!]
  create: [MediaCreateWithoutUploadedByInput!]
  delete: [MediaUniqueFilter!]
  deleteMany: [MediaWithoutUploadedByFilter!]
  disconnect: [MediaUniqueFilter!]
  set: [MediaUniqueFilter!]
  update: [UserUpdateMediaRelationUpdate!]
  updateMany: [UserUpdateMediaRelationUpdateMany!]
}

input UserUpdateMediaRelationUpdate {
  data: MediaUpdateWithoutUploadedByInput
  where: MediaUniqueFilter
}

input UserUpdateMediaRelationUpdateMany {
  data: MediaUpdateWithoutUploadedByInput
  where: MediaWithoutUploadedByFilter
}

input UserUpdatePostsRelation {
  connect: [PostUniqueFilter!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostUniqueFilter!]
  deleteMany: [PostWithoutAuthorFilter!]
  disconnect: [PostUniqueFilter!]
  set: [PostUniqueFilter!]
  update: [UserUpdatePostsRelationUpdate!]
  updateMany: [UserUpdatePostsRelationUpdateMany!]
}

input UserUpdatePostsRelationUpdate {
  data: PostUpdateWithoutAuthorInput
  where: PostUniqueFilter
}

input UserUpdatePostsRelationUpdateMany {
  data: PostUpdateWithoutAuthorInput
  where: PostWithoutAuthorFilter
}

input UserUpdateProfileRelation {
  connect: ProfileUniqueFilter
  create: ProfileCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: ProfileUpdateWithoutUserInput
}

input UserUpdateWithoutCommentsInput {
  Media: [UserUpdateMediaRelation!]
  email: String
  followers: [UserUpdateFollowersRelation!]
  following: [UserUpdateFollowingRelation!]
  id: Int
  name: String
  posts: [UserUpdatePostsRelation!]
  profile: UserUpdateProfileRelation
}

input UserUpdateWithoutFollowersInput {
  Media: [UserUpdateMediaRelation!]
  comments: [UserUpdateCommentsRelation!]
  email: String
  following: [UserUpdateFollowingRelation!]
  id: Int
  name: String
  posts: [UserUpdatePostsRelation!]
  profile: UserUpdateProfileRelation
}

input UserUpdateWithoutFollowingInput {
  Media: [UserUpdateMediaRelation!]
  comments: [UserUpdateCommentsRelation!]
  email: String
  followers: [UserUpdateFollowersRelation!]
  id: Int
  name: String
  posts: [UserUpdatePostsRelation!]
  profile: UserUpdateProfileRelation
}

input UserUpdateWithoutMediaInput {
  comments: [UserUpdateCommentsRelation!]
  email: String
  followers: [UserUpdateFollowersRelation!]
  following: [UserUpdateFollowingRelation!]
  id: Int
  name: String
  posts: [UserUpdatePostsRelation!]
  profile: UserUpdateProfileRelation
}

input UserUpdateWithoutPostsInput {
  Media: [UserUpdateMediaRelation!]
  comments: [UserUpdateCommentsRelation!]
  email: String
  followers: [UserUpdateFollowersRelation!]
  following: [UserUpdateFollowingRelation!]
  id: Int
  name: String
  profile: UserUpdateProfileRelation
}"
`;
